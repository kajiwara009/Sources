package org.aiwolf.common.util;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.Calendar;import java.util.Date;/** * カレンダーに関するstaticメソッドを提供するクラス * @author tori * */public class CalendarTools {	/**	 * カレンダーを<b>yyyy/MM/dd HH:mm:ss</b>形式の文字列に直して返す	 * @param cal 対象Calendar	 * @return 文字列フォーマット	 */	public static String toDateTime(Calendar cal) {		SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");		return sdf.format(cal.getTime());	}		/**	 * Dateを<b>yyyy/MM/dd HH:mm:ss</b>形式の文字列に直して返す	 * @param date 対象Date	 * @return 文字列フォーマット	 */	public static String toDateTime(Date date) {		SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");		return sdf.format(date.getTime());	}		/**	 * longを<b>yyyy/MM/dd HH:mm:ss</b>形式の文字列に直して返す	 * @param time 対象long	 * @return 文字列フォーマット	 */	public static String toDateTime(long time) {		Date date = new Date(time);		return toDateTime(date);	}	/**	 * 年-月-日-時-分-秒の順で並んだ日付をカレンダーに変更．<br>	 * 区切り文字は数字以外のすべての文字．空白でも良い．<br> 	 * 足りない分はすべて0で補完	 * @param dateTimeString	 */	public static Calendar toCalendar(String dateTimeString) {		String[] ary = dateTimeString.split("[\\D\\s]+");		int[] dateAry = new int[ary.length];		int idx = 0;		for(int i = 0; i < ary.length; i++){			try{				if(idx == 1){					dateAry[idx++] = Integer.parseInt(ary[i])-1;				}				else{					dateAry[idx++] = Integer.parseInt(ary[i]);				}			}catch(NumberFormatException e){				//throw e;			}		}				int[] targetAry = {			Calendar.YEAR,			Calendar.MONTH,			Calendar.DAY_OF_MONTH,			Calendar.HOUR_OF_DAY,			Calendar.MINUTE,			Calendar.SECOND,			Calendar.MILLISECOND		};				Calendar cal = Calendar.getInstance();		for(int i = 0; i < targetAry.length; i++){			if(dateAry.length <= i){				cal.set(targetAry[i], 0);			}			else{				cal.set(targetAry[i], dateAry[i]);			}		}		return cal;	}			/**	 * Date型をCalendar型に変換する	 * @param date	 * @return	 */	static public Calendar toCalendar(Date date){		Calendar cal = Calendar.getInstance();		cal.setTime(date);		return cal;	}		/**	 * ミリ秒からカレンダーを作成する	 * @param timeInMillis	 * @return	 */	static public Calendar toCalendar(long timeInMillis){		Calendar cal = Calendar.getInstance();		cal.setTimeInMillis(timeInMillis);		return cal;	}		/**	 * その日の深夜(00:00:00.000)に時間を設定する．	 * @param calendar	 * @return	 */	static public Calendar toMidnight(Calendar calendar){		Calendar date = (Calendar) calendar.clone();		date.set(Calendar.HOUR_OF_DAY, 0);		date.set(Calendar.MINUTE, 0);		date.set(Calendar.SECOND, 0);		date.set(Calendar.MILLISECOND, 0);		return date;	}		/**	 * カレンダーを<b>yyyy/MM/dd</b>形式の文字列に直して返す	 * @param cal 対象Calendar	 * @return 文字列フォーマット	 */	static public String toDateString(Calendar cal){		SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");		return sdf.format(cal.getTime());	}	/**	 * カレンダーを<b>yyyy/MM/dd</b>形式の文字列に直して返す	 * @param date 対象Date	 * @return 文字列フォーマット	 */	static public String toDateString(Date date){		SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");		return sdf.format(date.getTime());	}		/**	 * 同一日かどうかを返す	 * @param date1	 * @param date2	 * @return	 */	public static boolean isSameDay(Calendar date1, Calendar date2) {		return date1.get(Calendar.YEAR) == date2.get(Calendar.YEAR) &&				date1.get(Calendar.DAY_OF_YEAR) == date2.get(Calendar.DAY_OF_YEAR);	}}